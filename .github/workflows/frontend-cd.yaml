# There should be a file called .github/workflows/frontend-cd.yaml in the root of the project.
# on every pull request against the main branch.
name: Miro's FE CD
on:
    # merge to main branch
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-pull_request-workflow-when-a-pull-request-merges
    pull_request:
      types:
        - closed
    # Manual trigger
    workflow_dispatch:
    # DONE: this is to speed up development, needs to be commented out before submitting project
    # push:
    #     branches:
    #         main
env:
  FRONTEND_PATH: ./starter/frontend
  NODE_VERSION: '18'

  AWS_REGION: "eu-central-1"
  EKS_CLUSTER_NAME: movie-picture-cluster
  ECS_REPO_NAME: movie-picture-frontend


jobs:
  lint-job:
    if: github.event.pull_request.merged == true  || github.event_name == 'workflow_dispatch'  || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: ${{  env.NODE_VERSION}}

      # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
      - name: Cache node modules
        # job id
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
              ${{ runner.os }}-build-${{ env.cache-name }}-
              ${{ runner.os }}-build-
              ${{ runner.os }}-
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Inform of cache hit
        run: echo "cache miss :("

      - name: Install dependencies
        # change path
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npm ci

      - name: Run lint
        id: run-lint
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npm run lint
      # - if: ${{ steps.run-lint.outputs.cache-hit != 'true' }}
      #   name: Inform of cache hit
      #   run: echo "cache miss :("
  test-job:
    if: github.event.pull_request.merged == true  || github.event_name == 'workflow_dispatch' || github.event_name == 'push' 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: ${{  env.NODE_VERSION}}

      # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
      - name: Cache node modules
        # job id
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
              ${{ runner.os }}-build-${{ env.cache-name }}-
              ${{ runner.os }}-build-
              ${{ runner.os }}-
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Inform of cache hit
        run: echo "cache miss :("

      - name: Install dependencies
        # change path
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npm ci

      - name: Run test
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npm run test

  build-job:
    # I was confused does step in build needs to be repated or there was an error in assignement defintion
    needs: [lint-job, test-job]
    # if jobs in needs are successful
    if: success() && (github.event.pull_request.merged == true || github.event_name == 'push'  || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest

    # Permission can be added at job level or workflow level    
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

    #   # use role instead of user
    #   # https://aws.amazon.com/blogs/security/use-iam-roles-to-connect-github-actions-to-actions-in-aws/

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/Github-runner-role
          role-duration-seconds: 3600
          role-session-name: GitHub_to_AWS_via_Temp_Credentials
          # role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/Github-runner-role #change to reflect your IAM roleâ€™s ARN
          # role-session-name: GitHub_to_AWS_via_FederatedOIDC
          # aws-region: ${{ env.AWS_REGION }}
      # Hello from AWS: WhoAmI
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image to ECR
        working-directory: ${{ env.FRONTEND_PATH }}
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: ${{ env.ECS_REPO_NAME }} 
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://a63b0c40d99cd457bb5c2f5c2edb624f-1923285280.eu-central-1.elb.amazonaws.com:80 -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Update cluster name
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Check k8s config minify
        run: |
          kubectl config view --minify

      - name: Check k8s config
        run: |
          kubectl get svc

      - name: Change docker image version
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: ${{ env.ECS_REPO_NAME }} 
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ${{ env.FRONTEND_PATH }}/k8s
        run: |
          kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy the Docker image to Amazon EKS
        working-directory: ${{ env.FRONTEND_PATH }}/k8s
        # output of build command is input for kubectl apply command !
        run: |
          kustomize build | kubectl apply -f - --validate=false
