# There should be a file called .github/workflows/frontend-cd.yaml in the root of the project 
# There should be a step in the workflow that runs linting. There should be a step in the workflow that runs the tests There should be a step that builds the application using docker.
# There should be a step that utilizes aws-actions/amazon-ecr-login action for logging into ECR. 
# (using 3rd party actions) The ECR login step should also be accessing Github Secrets for credentials. (secure approach)
# There should be a step that pushes the docker image to ECR in the AWS account. There should be a step that deploys the application using kubectl to the kubernetes cluster
name: Miro's BE CD
on:
    # merge to main branch
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-pull_request-workflow-when-a-pull-request-merges
    pull_request:
        types:
          - closed
      # Manual trigger
    workflow_dispatch:
      # DONE: this is to speed up development, needs to be commented out before submitting project
    # push:
    #     branches:
    #         main
env:
  BACKEND_PATH: ./starter/backend
  PYTHON_VERSION: '3.10'
  AWS_REGION: "eu-central-1"
  EKS_CLUSTER_NAME: movie-picture-cluster
  ECS_REPO_NAME: movie-picture-backend

jobs:
    lint-job:
        if: github.event.pull_request.merged == true  || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Python
              uses: actions/setup-python@v4
              with:
                python-version: ${{  env.PYTHON_VERSION}}

            - name: Install pipenv
              run: |
                python -m pip install --upgrade pip
                pip install pipenv

            - name: Install dependencies
              # change path
              working-directory: ${{ env.BACKEND_PATH }}
              run: pipenv install --dev

            - name: Run lint
              working-directory: ${{ env.BACKEND_PATH }}
              run: pipenv run lint

    test-job:
      if: github.event.pull_request.merged == true  || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Setup Python
          uses: actions/setup-python@v4
          with:
            python-version: ${{  env.PYTHON_VERSION}}
        
        - name: Install pipenv
          run: pip install pipenv

        - name: Install dependencies
            # change path
          working-directory: ${{ env.BACKEND_PATH }}
          run: pipenv install

        - name: Run test
          working-directory: ${{ env.BACKEND_PATH }}
          run: pipenv run test

    build-job:
      # I was confused does step in build needs to be repated or there was an error in assignement defintion
      needs: [lint-job, test-job]
      # if jobs in needs are successful
      if: success() &&  (github.event.pull_request.merged == true  || github.event_name == 'workflow_dispatch' || github.event_name == 'push')

      runs-on: ubuntu-latest
        
      # Permission can be added at job level or workflow level    
      permissions:
        id-token: write   # This is required for requesting the JWT
        contents: read    # This is required for actions/checkout
      steps:
        - name: Git clone the repository
          uses: actions/checkout@v3

    #   # use role instead of user
    #   # https://aws.amazon.com/blogs/security/use-iam-roles-to-connect-github-actions-to-actions-in-aws/

        - name: configure aws credentials
          uses: aws-actions/configure-aws-credentials@v4.0.2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
            role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/Github-runner-role
            role-duration-seconds: 3600
            role-session-name: GitHub_to_AWS_via_Temp_Credentials
        # Hello from AWS: WhoAmI
        - name: Sts GetCallerIdentity
          run: |
            aws sts get-caller-identity

        - name: Login to ECR
          id: ecr-login
          uses: aws-actions/amazon-ecr-login@v2

        - name: Build and push image to ECR
          working-directory: ${{ env.BACKEND_PATH }}
          env:
            REGISTRY: ${{ steps.ecr-login.outputs.registry }}
            REPOSITORY: ${{ env.ECS_REPO_NAME }} 
            IMAGE_TAG: ${{ github.sha }}
          run: |
            docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
            docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        - name: Update cluster name
          run: |
              aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

        - name: Install kubectl
          uses: azure/setup-kubectl@v3

        - name: Check k8s config minify
          run: |
            kubectl config view --minify

        - name: Check k8s config
          run: |
            kubectl get svc

        - name: Deploy the Docker image to Amazon EKS
          env:
            REGISTRY: ${{ steps.ecr-login.outputs.registry }}
            REPOSITORY: ${{ env.ECS_REPO_NAME }} 
            IMAGE_TAG: ${{ github.sha }}
          working-directory: ${{ env.BACKEND_PATH }}/k8s
          run: |
            kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
            kustomize build | kubectl apply -f - --validate=false
